print("condition a < b < c  is TRUE")
}
val1 = 6
val2 = 7
val3 = "s"
result = switch(
val3,
"a"= cat("Addition =", val1 + val2),
"d"= cat("Subtraction =", val1 - val2),
"r"= cat("Division = ", val1 / val2),
"s"= cat("Multiplication =", val1 * val2),
"m"= cat("Modulus =", val1 %% val2),
"p"= cat("Power =", val1 ^ val2)
)
empId = c(1, 2, 3, 4)
empName = c("Debi", "Sandeep", "Subham", "Shiba")
numberOfEmp = 4
empList = list(
"ID" = empId,
"Names" = empName,
"Total Staff" = numberOfEmp
)
print(empList)
print(empList$Names)
print(empList[[2]][2])
empList[[2]][5] = "Kamala"
empAge = c(34, 23, 18, 45)
empAgeList = list(
"Age" = empAge
)
empList = c(empList, empAgeList)
cat("After concatenation of the new list\n")
print(empList)
print(empList[-3])
age <- c(40, 49, 48, 40, 67, 52, 53)
salary <- c(103200, 106200, 150200,
10606, 10390, 14070, 10220)
gender <- c("male", "male", "transgender",
"female", "male", "female", "transgender")
employee<- data.frame(age, salary, gender)
print(employee)
nuevo<-employee[-2]
nuevo
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
d <- data.frame(name=c("Abhi", "Bhavesh",
"Chaman", "Dimri"),
age=c(7, 5, 9, 16),
ht=c(46, NA, NA, 69),
school=c("yes", "yes", "no", "no"))
d
d %>% filter(!is.na(ht))
d.name<- arrange(d, age)
print(d.name)
summarise(d, mean = mean(age))
quitarNA<-airquality[!is.na(airquality$Ozone),]
quitarNA
densityplot(~hp, main ="Density plot of HP", xlab ="HP")
library(lattice)
densityplot(~hp, main ="Density plot of HP", xlab ="HP")
hp<-mtcars$hp
densityplot(~hp, main ="Density plot of HP", xlab ="HP")
library(lattice)
png("DensityPlotLatticeGFG.png")
densityplot(~hp, main ="Density plot of HP", xlab ="HP")
dev.off()
data(ToothGrowth)
png("HistogramLatticeGFG.png")
histogram(~len, data = ToothGrowth,
main = "Histogram of Length")
dev.off()
library(lattice)
png("DensityPlotLatticeGFG.png")
densityplot(~hp, main ="Density plot of HP", xlab ="HP")
dev.off()
library(lattice)
png("DensityPlotLattice.png")
densityplot(~hp, main ="Density plot of HP", xlab ="HP")
dev.off()
data(ToothGrowth)
png("HistogramLattice.png")
histogram(~len, data = ToothGrowth,
main = "Histogram of Length")
dev.off()
install.packages("ggplot2")
install.packages("irr")
install.packages("stat")
install.packages("STAT")
install.packages("STAT4")
install.packages("ggplot")
install.packages("tidyverse")
install.packages("coin")
library(pwr)
install.packages("pwr")
semi_uva_21 <- read_excel("./semi_uva_21.xlsx")
library(crayon)
dat_RE <- semi_uva_21[semi_uva_21$grupo == "G1",]
source("uno.R")
ls
library(readxl)
library(ggplot2)
library(crayon)
library(pwr)
semi_uva_21 <- read_excel("./semi_uva_21.xlsx")
semi_uva_21 <- read_excel("C:/Users/chema/Desktop/formacionPracticar/cals-seminario/semi_uva_21.xlsx")
View(semi_uva_21)
# Estudio descriptivo
ggplot(semi_uva_21, aes(x=grupo, y= Efficiency)) + geom_boxplot()
ggplot(semi_uva_21, aes(x=grupo, y= Effectiveness, fill=grupo)) + geom_boxplot(outlier.colour = red())
dat_RE <- semi_uva_21[semi_uva_21$grupo == "G1",]
dat_FD <- semi_uva_21[semi_uva_21$grupo == "G2",]
View(dat_RE)
View(dat_FD)
# Resumen numérico del comportamiento de las variables
summary_RE_Effectiveness
# Resumen numérico del comportamiento de las variables
#summary_RE_Effectiveness
summary(dat_RE$Efficiency)
summary(dat_FD$Effectiveness)
summary(dat_FD$Efficiency)
#Con lo anterior la salida se produce por consola
# Así se asigna a una variable. Si no se asigna a una variable, sale por consola
summary_RE_Effectiveness <- summary(dat_RE$Effectiveness)
# Se imprime en consola el contenido de la variable
print(summary_RE_Effectiveness)
# Se accede al vector de resultados, por si acaso se necesitara programáticamente
summary_RE_Effectiveness[1]
# Estudio de la desviación estándar
sd(dat_RE$Effectiveness)
sd(dat_RE$Efficiency)
sd(dat_FD$Effectiveness)
sd(dat_FD$Efficiency)
attach(semi_uva_21)
#Estudio de normalidad
# de la variable en el conjunto completo
shapiro.test(Efficiency)
shapiro.test(Effectiveness)
# de la variable por cada subconjunto (cada grupo)
shapiro.test(dat_RE$Efficiency)
shapiro.test(dat_RE$Effectiveness)
shapiro.test(dat_FD$Efficiency)
shapiro.test(dat_FD$Effectiveness)
# Estudio de varianzas.
var.test(Efficiency ~ grupo, alternative='two.sided', conf.level=0.95, data= semi_uva_21)
# En el caso en el que no se asume normalidad
wilcox.test(dat_RE$Efficiency, dat_FD$Efficiency, paired = FALSE, Exact= TRUE, conf.int = 0.95 )
# En el caso en el que se asume normalidad
t.test(dat_RE$Effectiveness, dat_FD$Effectiveness, paired = FALSE, alternative ="two.sided", conf.level=0.95)
# En este caso es posible calcular la potencia porque conocemos la distribución (normal)
pwr.t2n.test(n1 = 25, n2= 26, d = 1.26, sig.level = 0.05, power = NULL, alternative = "two.sided")
library(readxl)
post_test_semi_uva21 <- read_excel("C:/Users/chema/Desktop/formacionPracticar/cals-seminario/post_test_semi_uva21.xls")
View(post_test_semi_uva21)
attach(post_test_semi_uva21)
tabladif<-table(`dificultad tareas`)
tabladif<-table(`difitareas`)
tabladif<-(prop.table(tabladif))
barplot(tabladif, xlab='Dificultad de las tareas', ylab=' frecuencias relativas',las=1)
tabladifcodigo <- table(`dificodigo`)
tabladifcodigo <-(prop.table(tabladifcodigo))
barplot(tabladifcodigo, xlab='Dificultad del código', ylab=' frecuencias relativas',las=1)
tabladifdiagrama <- table(`difidiagrama`)
tabladifdiagrama <- table(`difidiagramas`)
tabladifdiagrama <- (prop.table(tabladifdiagrama))
barplot(tabladifdiagrama, xlab='Dificultad del diagrama', ylab=' frecuencias relativas',las=1)
dificultad <-subset(post_test_semi_uva21, select= c(`dificultad tareas`, `dificultad codigo`, `dificultad diagrama`))
dificultad <-subset(post_test_semi_uva21, select= c(`difitareas`, `dificodigo`, `difidiagramas`))
stacked_df<- stack(dificultad)
# Nos permite hacer el box-plot conjunto de las 3 variables
par(mfrow = c(1, ncol(dificultad)))
invisible(lapply(1:ncol(dificultad), function(i) boxplot(dificultad[, i])))
cor.test(`dificodigo`, `difidiagrama`, method ='kendall')
cor.test(`dificultad codigo`, `dificultad diagrama`, method ='kendall')
cor.test(table(`dificodigo`), table(`difidiagramas`), method ='kendall')
dificultad <-subset(post_test_semi_uva21, select= c(`difitareas`, `dificodigo`, `difidiagramas`))
stacked_df<- stack(dificultad)
# Nos permite hacer el box-plot conjunto de las 3 variables
par(mfrow = c(1, ncol(dificultad)))
invisible(lapply(1:ncol(dificultad), function(i) boxplot(dificultad[, i])))
tabladifcodigo <- table(`dificodigo`)
tabladifcodigo <-(prop.table(tabladifcodigo))
barplot(tabladifcodigo, xlab='Dificultad del código', ylab=' frecuencias relativas',las=1)
cor.test(tabladifcodigo, tabladifdiagrama, method ='kendall')
cor.test(`difitareas`, `dificodigo`, method ='kendall')
library(readxl)
library(ggplot2)
library(crayon)
library(pwr)
semi_uva_21 <- read_excel("C:/Users/chema/Desktop/formacionPracticar/cals-seminario/semi_uva_21.xlsx")
View(semi_uva_21)
# Estudio descriptivo
ggplot(semi_uva_21, aes(x=grupo, y= Efficiency)) + geom_boxplot()
ggplot(semi_uva_21, aes(x=grupo, y= Effectiveness, fill=grupo)) + geom_boxplot(outlier.colour = red())
dat_RE <- semi_uva_21[semi_uva_21$grupo == "G1",]
dat_FD <- semi_uva_21[semi_uva_21$grupo == "G2",]
View(dat_RE)
View(dat_FD)
summary(dat_RE$Efficiency)
summary(dat_FD$Effectiveness)
summary(dat_FD$Efficiency)
#Con lo anterior la salida se produce por consola
# Así se asigna a una variable. Si no se asigna a una variable, sale por consola
summary_RE_Effectiveness <- summary(dat_RE$Effectiveness)
# Se imprime en consola el contenido de la variable
print(summary_RE_Effectiveness)
# Se accede al vector de resultados, por si acaso se necesitara programáticamente
summary_RE_Effectiveness[1]
# Estudio de la desviación estándar
sd(dat_RE$Effectiveness)
sd(dat_RE$Efficiency)
sd(dat_FD$Effectiveness)
sd(dat_FD$Efficiency)
attach(semi_uva_21)
#Estudio de normalidad
# de la variable en el conjunto completo
shapiro.test(Efficiency)
shapiro.test(Effectiveness)
# de la variable por cada subconjunto (cada grupo)
shapiro.test(dat_RE$Efficiency)
shapiro.test(dat_RE$Effectiveness)
shapiro.test(dat_FD$Efficiency)
shapiro.test(dat_FD$Effectiveness)
# Estudio de varianzas.
var.test(Efficiency ~ grupo, alternative='two.sided', conf.level=0.95, data= semi_uva_21)
# En el caso en el que no se asume normalidad
wilcox.test(dat_RE$Efficiency, dat_FD$Efficiency, paired = FALSE, Exact= TRUE, conf.int = 0.95 )
# En el caso en el que se asume normalidad
t.test(dat_RE$Effectiveness, dat_FD$Effectiveness, paired = FALSE, alternative ="two.sided", conf.level=0.95)
pwr.t2n.test(n1 = 25, n2= 26, d = 1.26, sig.level = 0.05, power = NULL, alternative = "two.sided")
library(readxl)
post_test_semi_uva21 <- read_excel("C:/Users/chema/Desktop/formacionPracticar/cals-seminario/post_test_semi_uva21.xls")
View(post_test_semi_uva21)
attach(post_test_semi_uva21)
tabladif<-table(`difitareas`)
tabladif<-(prop.table(tabladif))
barplot(tabladif, xlab='Dificultad de las tareas', ylab=' frecuencias relativas',las=1)
tabladifcodigo <- table(`dificodigo`)
tabladifcodigo <-(prop.table(tabladifcodigo))
barplot(tabladifcodigo, xlab='Dificultad del código', ylab=' frecuencias relativas',las=1)
tabladifdiagrama <- table(`difidiagramas`)
tabladifdiagrama <- (prop.table(tabladifdiagrama))
barplot(tabladifdiagrama, xlab='Dificultad del diagrama', ylab=' frecuencias relativas',las=1)
dificultad <-subset(post_test_semi_uva21, select= c(`difitareas`, `dificodigo`, `difidiagramas`))
stacked_df<- stack(dificultad)
# Nos permite hacer el box-plot conjunto de las 3 variables
par(mfrow = c(1, ncol(dificultad)))
invisible(lapply(1:ncol(dificultad), function(i) boxplot(dificultad[, i])))
cor.test(`difitareas`, `dificodigo`, method ='kendall')
#analisis companias
#carga de datos
getwd()
setwd("C:\\Users\\chema\\Desktop\\formacionPracticar\\r-studio-curso")
companies_data <- read.csv("companies.csv",header = TRUE,na.strings = c(""))
#comprobar datos cargados
head(companies_data)
summary(companies_data)
str(companies_data)
names(companies_data)
nrow(companies_data)
ncol(companies_data)
#elementos vacios con algun atributo vacio
companies_data[!complete.cases(companies_data),]
nrow(companies_data[!complete.cases(companies_data),])
#ponemos como factores
companies_data$Industry<-factor(companies_data$Industry)
str(companies_data)
#valores diferentes
levels(companies_data$Industry)
#valores unicos
unicos_estados<-unique(companies_data$State)
unicos_estados
#reemplazos cadenas
head(companies_data)
companies_data$Expenses<-gsub(" Dollars","",companies_data$Expenses)
head(companies_data)
companies_data$Expenses<-gsub(",","",companies_data$Expenses)
head(companies_data)
companies_data$Revenue<-gsub("\\$","",companies_data$Revenue)
head(companies_data)
companies_data$Revenue<-gsub(",","",companies_data$Revenue)
head(companies_data)
companies_data$Growth<-gsub("%","",companies_data$Growth)
head(companies_data)
str(companies_data)
tipo_columna <- class(companies_data$Expenses)
tipo_columna
#convertir a numero
companies_data$Expenses<-as.numeric(companies_data$Expenses)
companies_data$Revenue<-as.numeric(companies_data$Revenue)
companies_data$Growth<-as.numeric(companies_data$Growth)
tipo_columna <- class(companies_data$Expenses)
tipo_columna
str(companies_data)
#elementos vacios con algun atributo vacio
companies_data[!complete.cases(companies_data),]
nrow(companies_data[!complete.cases(companies_data),])
#filtramos companias con determinado numero de empleados
companies_data[which(companies_data$Employees==45),]
#eliminamos filas con valor nulo en este atributo
nrow(companies_data[!complete.cases(companies_data),])
companies_data<-companies_data[!is.na(companies_data$Industry),]
nrow(companies_data[!complete.cases(companies_data),])
#reiniciamos indices
rownames(companies_data)<-NULL
companies_data
#ponemos en este atributo el valor que corresponde
nrow(companies_data[!complete.cases(companies_data),])
companies_data[!complete.cases(companies_data),]
companies_data[is.na(companies_data$State) & companies_data$City=="New York","State"]<-"NY"
companies_data[c(11,377),]
companies_data[is.na(companies_data$State) & companies_data$City=="San Francisco",]
companies_data[is.na(companies_data$State) & companies_data$City=="San Francisco","State"]<-"CA"
companies_data[c(82,265),]
companies_data[!complete.cases(companies_data),]
nrow(companies_data[!complete.cases(companies_data),])
#calculamos mediana de la columna
median(companies_data[,"Employees"],na.rm=TRUE)
mean(companies_data[,"Employees"],na.rm=TRUE)
#mediana de una columna filtrando
med_emp_retail<-median(companies_data[companies_data$Industry=="Retail","Employees"],na.rm=TRUE)
#buscmos elemento y le ponemos valor
companies_data[is.na(companies_data$Employees) & companies_data$Industry=="Retail",]
companies_data[is.na(companies_data$Employees) & companies_data$Industry=="Retail","Employees"]<-med_emp_retail
companies_data[3,]
companies_data[companies_data$Industry=="Financial Services",]
companies_data[companies_data$Industry=="Financial Services","Employees"]
med_emp_financial<-median(companies_data[companies_data$Industry=="Financial Services","Employees"],na.rm=TRUE)
companies_data[is.na(companies_data$Employees) & companies_data$Industry=="Financial Services",]
companies_data[is.na(companies_data$Employees) & companies_data$Industry=="Financial Services","Employees"]<-med_emp_financial
companies_data[330,]
companies_data[!complete.cases(companies_data),]
med_grow_constr<-median(companies_data[companies_data$Industry=="Construction","Growth"],na.rm=TRUE)
med_grow_constr
companies_data[is.na(companies_data$Growth) & companies_data$Industry=="Construction",]
companies_data[is.na(companies_data$Growth) & companies_data$Industry=="Construction","Growth"]<-med_grow_constr
companies_data[8,]
med_revenue_constr<-median(companies_data[companies_data$Industry=="Construction","Revenue"],na.rm=TRUE)
med_revenue_constr
companies_data[is.na(companies_data$Revenue) & companies_data$Industry=="Construction",]
companies_data[is.na(companies_data$Revenue) & companies_data$Industry=="Construction","Revenue"]<-med_revenue_constr
companies_data[c(8,42),]
med_expenses_constr<-median(companies_data[companies_data$Industry=="Construction","Expenses"],na.rm=TRUE)
med_expenses_constr
companies_data[is.na(companies_data$Expenses) & companies_data$Industry=="Construction"& is.na(companies_data$Profit),]
companies_data[is.na(companies_data$Expenses) & companies_data$Industry=="Construction"& is.na(companies_data$Profit),"Expenses"]<-med_expenses_constr
companies_data[c(8,42),]
#este atributo lo calculamos a partir de otros
companies_data[is.na(companies_data$Profit),]
companies_data[is.na(companies_data$Profit),"Profit"]<-companies_data[is.na(companies_data$Profit),"Revenue"]-companies_data[is.na(companies_data$Profit),"Expenses"]
companies_data[c(8,42),]
companies_data[!complete.cases(companies_data),]
companies_data[is.na(companies_data$Expenses),"Expenses"]<-companies_data[is.na(companies_data$Expenses),"Revenue"]-companies_data[is.na(companies_data$Expenses),"Profit"]
companies_data[15,]
companies_data<-companies_data[complete.cases(companies_data),]
#dataframe analisis previo
head(companies_data)
colnames(companies_data)
str(companies_data)
#grafico puntos con 4 dimensiones (video)
p<-ggplot(data=companies_data)
library(ggplot2)
#analisis companias
#carga de datos
getwd()
setwd("C:\\Users\\chema\\Desktop\\formacionPracticar\\r-studio-curso")
companies_data <- read.csv("companies.csv",header = TRUE,na.strings = c(""))
#comprobar datos cargados
head(companies_data)
summary(companies_data)
str(companies_data)
names(companies_data)
nrow(companies_data)
ncol(companies_data)
#elementos vacios con algun atributo vacio
companies_data[!complete.cases(companies_data),]
nrow(companies_data[!complete.cases(companies_data),])
#ponemos como factores
companies_data$Industry<-factor(companies_data$Industry)
str(companies_data)
#valores diferentes
levels(companies_data$Industry)
#valores unicos
unicos_estados<-unique(companies_data$State)
unicos_estados
#reemplazos cadenas
head(companies_data)
companies_data$Expenses<-gsub(" Dollars","",companies_data$Expenses)
head(companies_data)
companies_data$Expenses<-gsub(",","",companies_data$Expenses)
head(companies_data)
companies_data$Revenue<-gsub("\\$","",companies_data$Revenue)
head(companies_data)
companies_data$Revenue<-gsub(",","",companies_data$Revenue)
head(companies_data)
companies_data$Growth<-gsub("%","",companies_data$Growth)
head(companies_data)
str(companies_data)
tipo_columna <- class(companies_data$Expenses)
tipo_columna
#convertir a numero
companies_data$Expenses<-as.numeric(companies_data$Expenses)
companies_data$Revenue<-as.numeric(companies_data$Revenue)
companies_data$Growth<-as.numeric(companies_data$Growth)
tipo_columna <- class(companies_data$Expenses)
tipo_columna
str(companies_data)
#elementos vacios con algun atributo vacio
companies_data[!complete.cases(companies_data),]
nrow(companies_data[!complete.cases(companies_data),])
#filtramos companias con determinado numero de empleados
companies_data[which(companies_data$Employees==45),]
#eliminamos filas con valor nulo en este atributo
nrow(companies_data[!complete.cases(companies_data),])
companies_data<-companies_data[!is.na(companies_data$Industry),]
nrow(companies_data[!complete.cases(companies_data),])
#reiniciamos indices
rownames(companies_data)<-NULL
companies_data
#ponemos en este atributo el valor que corresponde
nrow(companies_data[!complete.cases(companies_data),])
companies_data[!complete.cases(companies_data),]
companies_data[is.na(companies_data$State) & companies_data$City=="New York","State"]<-"NY"
companies_data[c(11,377),]
companies_data[is.na(companies_data$State) & companies_data$City=="San Francisco",]
companies_data[is.na(companies_data$State) & companies_data$City=="San Francisco","State"]<-"CA"
companies_data[c(82,265),]
companies_data[!complete.cases(companies_data),]
nrow(companies_data[!complete.cases(companies_data),])
#calculamos mediana de la columna
median(companies_data[,"Employees"],na.rm=TRUE)
mean(companies_data[,"Employees"],na.rm=TRUE)
#mediana de una columna filtrando
med_emp_retail<-median(companies_data[companies_data$Industry=="Retail","Employees"],na.rm=TRUE)
#buscmos elemento y le ponemos valor
companies_data[is.na(companies_data$Employees) & companies_data$Industry=="Retail",]
companies_data[is.na(companies_data$Employees) & companies_data$Industry=="Retail","Employees"]<-med_emp_retail
companies_data[3,]
companies_data[companies_data$Industry=="Financial Services",]
companies_data[companies_data$Industry=="Financial Services","Employees"]
med_emp_financial<-median(companies_data[companies_data$Industry=="Financial Services","Employees"],na.rm=TRUE)
companies_data[is.na(companies_data$Employees) & companies_data$Industry=="Financial Services",]
companies_data[is.na(companies_data$Employees) & companies_data$Industry=="Financial Services","Employees"]<-med_emp_financial
companies_data[330,]
companies_data[!complete.cases(companies_data),]
med_grow_constr<-median(companies_data[companies_data$Industry=="Construction","Growth"],na.rm=TRUE)
med_grow_constr
companies_data[is.na(companies_data$Growth) & companies_data$Industry=="Construction",]
companies_data[is.na(companies_data$Growth) & companies_data$Industry=="Construction","Growth"]<-med_grow_constr
companies_data[8,]
med_revenue_constr<-median(companies_data[companies_data$Industry=="Construction","Revenue"],na.rm=TRUE)
med_revenue_constr
companies_data[is.na(companies_data$Revenue) & companies_data$Industry=="Construction",]
companies_data[is.na(companies_data$Revenue) & companies_data$Industry=="Construction","Revenue"]<-med_revenue_constr
companies_data[c(8,42),]
med_expenses_constr<-median(companies_data[companies_data$Industry=="Construction","Expenses"],na.rm=TRUE)
med_expenses_constr
companies_data[is.na(companies_data$Expenses) & companies_data$Industry=="Construction"& is.na(companies_data$Profit),]
companies_data[is.na(companies_data$Expenses) & companies_data$Industry=="Construction"& is.na(companies_data$Profit),"Expenses"]<-med_expenses_constr
companies_data[c(8,42),]
#este atributo lo calculamos a partir de otros
companies_data[is.na(companies_data$Profit),]
companies_data[is.na(companies_data$Profit),"Profit"]<-companies_data[is.na(companies_data$Profit),"Revenue"]-companies_data[is.na(companies_data$Profit),"Expenses"]
companies_data[c(8,42),]
companies_data[!complete.cases(companies_data),]
companies_data[is.na(companies_data$Expenses),"Expenses"]<-companies_data[is.na(companies_data$Expenses),"Revenue"]-companies_data[is.na(companies_data$Expenses),"Profit"]
companies_data[15,]
companies_data<-companies_data[complete.cases(companies_data),]
#dataframe analisis previo
head(companies_data)
colnames(companies_data)
str(companies_data)
#grafico puntos con 4 dimensiones (video)
p<-ggplot(data=companies_data)
p+geom_point(aes(x=Revenue,y=Expenses,colour=Industry,size=Profit))
#con linea curva
d<-ggplot(data=companies_data,aes(x=Revenue,y=Expenses,colour=Industry))
d+geom_point()+geom_smooth(fill=NA,size=1.2)
#de caja
f<-ggplot(data=companies_data,aes(x=Industry,y=Growth,colour=Industry))
f+geom_boxplot(size=1)
#de caja con puntos
f+geom_jitter()+geom_boxplot(size=1,alpha=0.5,outlier.color=NA)
#separando variso graficos
p<-ggplot(data=companies_data,aes(x=Revenue,y=Expenses,colour=State))
p+geom_point(size=3)+facet_grid(.~Industry)
#beneficios por industria
library(dplyr)
industria_beneficios <- companies_data %>%
group_by(Industry) %>%
summarise(Suma_Beneficios = mean(Profit)) %>%
arrange(desc(Suma_Beneficios))
print(class(industria_beneficios))
industria_beneficios<- as.data.frame(industria_beneficios)
industria_beneficios
frecuencia <- table(companies_data$Industry)
frecuencia<- as.data.frame(frecuencia)
frecuencia
colnames(frecuencia)<-c("Industry","Cuenta")
frecuencia
merged_industry<-merge(industria_beneficios, frecuencia, by.x="Industry", by.y="Industry")
merged_industry
merged_industry$Media<-round(merged_industry$Suma_Beneficios/merged_industry$Cuenta,2)
merged_industry
#beneficios por area (video)
ggplot(merged_industry, aes(x = Industry, y = Cuenta)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Gráfico de Barras de proporción beneficios", x = "Industria", y = "Proporción")+
theme(plot.title = element_text(hjust = 0.5))
