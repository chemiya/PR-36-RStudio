install.packages("STAT4")
install.packages("ggplot")
install.packages("tidyverse")
install.packages("coin")
library(pwr)
install.packages("pwr")
semi_uva_21 <- read_excel("./semi_uva_21.xlsx")
library(crayon)
dat_RE <- semi_uva_21[semi_uva_21$grupo == "G1",]
source("uno.R")
ls
library(readxl)
library(ggplot2)
library(crayon)
library(pwr)
semi_uva_21 <- read_excel("./semi_uva_21.xlsx")
semi_uva_21 <- read_excel("C:/Users/chema/Desktop/formacionPracticar/cals-seminario/semi_uva_21.xlsx")
View(semi_uva_21)
# Estudio descriptivo
ggplot(semi_uva_21, aes(x=grupo, y= Efficiency)) + geom_boxplot()
ggplot(semi_uva_21, aes(x=grupo, y= Effectiveness, fill=grupo)) + geom_boxplot(outlier.colour = red())
dat_RE <- semi_uva_21[semi_uva_21$grupo == "G1",]
dat_FD <- semi_uva_21[semi_uva_21$grupo == "G2",]
View(dat_RE)
View(dat_FD)
# Resumen numérico del comportamiento de las variables
summary_RE_Effectiveness
# Resumen numérico del comportamiento de las variables
#summary_RE_Effectiveness
summary(dat_RE$Efficiency)
summary(dat_FD$Effectiveness)
summary(dat_FD$Efficiency)
#Con lo anterior la salida se produce por consola
# Así se asigna a una variable. Si no se asigna a una variable, sale por consola
summary_RE_Effectiveness <- summary(dat_RE$Effectiveness)
# Se imprime en consola el contenido de la variable
print(summary_RE_Effectiveness)
# Se accede al vector de resultados, por si acaso se necesitara programáticamente
summary_RE_Effectiveness[1]
# Estudio de la desviación estándar
sd(dat_RE$Effectiveness)
sd(dat_RE$Efficiency)
sd(dat_FD$Effectiveness)
sd(dat_FD$Efficiency)
attach(semi_uva_21)
#Estudio de normalidad
# de la variable en el conjunto completo
shapiro.test(Efficiency)
shapiro.test(Effectiveness)
# de la variable por cada subconjunto (cada grupo)
shapiro.test(dat_RE$Efficiency)
shapiro.test(dat_RE$Effectiveness)
shapiro.test(dat_FD$Efficiency)
shapiro.test(dat_FD$Effectiveness)
# Estudio de varianzas.
var.test(Efficiency ~ grupo, alternative='two.sided', conf.level=0.95, data= semi_uva_21)
# En el caso en el que no se asume normalidad
wilcox.test(dat_RE$Efficiency, dat_FD$Efficiency, paired = FALSE, Exact= TRUE, conf.int = 0.95 )
# En el caso en el que se asume normalidad
t.test(dat_RE$Effectiveness, dat_FD$Effectiveness, paired = FALSE, alternative ="two.sided", conf.level=0.95)
# En este caso es posible calcular la potencia porque conocemos la distribución (normal)
pwr.t2n.test(n1 = 25, n2= 26, d = 1.26, sig.level = 0.05, power = NULL, alternative = "two.sided")
library(readxl)
post_test_semi_uva21 <- read_excel("C:/Users/chema/Desktop/formacionPracticar/cals-seminario/post_test_semi_uva21.xls")
View(post_test_semi_uva21)
attach(post_test_semi_uva21)
tabladif<-table(`dificultad tareas`)
tabladif<-table(`difitareas`)
tabladif<-(prop.table(tabladif))
barplot(tabladif, xlab='Dificultad de las tareas', ylab=' frecuencias relativas',las=1)
tabladifcodigo <- table(`dificodigo`)
tabladifcodigo <-(prop.table(tabladifcodigo))
barplot(tabladifcodigo, xlab='Dificultad del código', ylab=' frecuencias relativas',las=1)
tabladifdiagrama <- table(`difidiagrama`)
tabladifdiagrama <- table(`difidiagramas`)
tabladifdiagrama <- (prop.table(tabladifdiagrama))
barplot(tabladifdiagrama, xlab='Dificultad del diagrama', ylab=' frecuencias relativas',las=1)
dificultad <-subset(post_test_semi_uva21, select= c(`dificultad tareas`, `dificultad codigo`, `dificultad diagrama`))
dificultad <-subset(post_test_semi_uva21, select= c(`difitareas`, `dificodigo`, `difidiagramas`))
stacked_df<- stack(dificultad)
# Nos permite hacer el box-plot conjunto de las 3 variables
par(mfrow = c(1, ncol(dificultad)))
invisible(lapply(1:ncol(dificultad), function(i) boxplot(dificultad[, i])))
cor.test(`dificodigo`, `difidiagrama`, method ='kendall')
cor.test(`dificultad codigo`, `dificultad diagrama`, method ='kendall')
cor.test(table(`dificodigo`), table(`difidiagramas`), method ='kendall')
dificultad <-subset(post_test_semi_uva21, select= c(`difitareas`, `dificodigo`, `difidiagramas`))
stacked_df<- stack(dificultad)
# Nos permite hacer el box-plot conjunto de las 3 variables
par(mfrow = c(1, ncol(dificultad)))
invisible(lapply(1:ncol(dificultad), function(i) boxplot(dificultad[, i])))
tabladifcodigo <- table(`dificodigo`)
tabladifcodigo <-(prop.table(tabladifcodigo))
barplot(tabladifcodigo, xlab='Dificultad del código', ylab=' frecuencias relativas',las=1)
cor.test(tabladifcodigo, tabladifdiagrama, method ='kendall')
cor.test(`difitareas`, `dificodigo`, method ='kendall')
library(readxl)
library(ggplot2)
library(crayon)
library(pwr)
semi_uva_21 <- read_excel("C:/Users/chema/Desktop/formacionPracticar/cals-seminario/semi_uva_21.xlsx")
View(semi_uva_21)
# Estudio descriptivo
ggplot(semi_uva_21, aes(x=grupo, y= Efficiency)) + geom_boxplot()
ggplot(semi_uva_21, aes(x=grupo, y= Effectiveness, fill=grupo)) + geom_boxplot(outlier.colour = red())
dat_RE <- semi_uva_21[semi_uva_21$grupo == "G1",]
dat_FD <- semi_uva_21[semi_uva_21$grupo == "G2",]
View(dat_RE)
View(dat_FD)
summary(dat_RE$Efficiency)
summary(dat_FD$Effectiveness)
summary(dat_FD$Efficiency)
#Con lo anterior la salida se produce por consola
# Así se asigna a una variable. Si no se asigna a una variable, sale por consola
summary_RE_Effectiveness <- summary(dat_RE$Effectiveness)
# Se imprime en consola el contenido de la variable
print(summary_RE_Effectiveness)
# Se accede al vector de resultados, por si acaso se necesitara programáticamente
summary_RE_Effectiveness[1]
# Estudio de la desviación estándar
sd(dat_RE$Effectiveness)
sd(dat_RE$Efficiency)
sd(dat_FD$Effectiveness)
sd(dat_FD$Efficiency)
attach(semi_uva_21)
#Estudio de normalidad
# de la variable en el conjunto completo
shapiro.test(Efficiency)
shapiro.test(Effectiveness)
# de la variable por cada subconjunto (cada grupo)
shapiro.test(dat_RE$Efficiency)
shapiro.test(dat_RE$Effectiveness)
shapiro.test(dat_FD$Efficiency)
shapiro.test(dat_FD$Effectiveness)
# Estudio de varianzas.
var.test(Efficiency ~ grupo, alternative='two.sided', conf.level=0.95, data= semi_uva_21)
# En el caso en el que no se asume normalidad
wilcox.test(dat_RE$Efficiency, dat_FD$Efficiency, paired = FALSE, Exact= TRUE, conf.int = 0.95 )
# En el caso en el que se asume normalidad
t.test(dat_RE$Effectiveness, dat_FD$Effectiveness, paired = FALSE, alternative ="two.sided", conf.level=0.95)
pwr.t2n.test(n1 = 25, n2= 26, d = 1.26, sig.level = 0.05, power = NULL, alternative = "two.sided")
library(readxl)
post_test_semi_uva21 <- read_excel("C:/Users/chema/Desktop/formacionPracticar/cals-seminario/post_test_semi_uva21.xls")
View(post_test_semi_uva21)
attach(post_test_semi_uva21)
tabladif<-table(`difitareas`)
tabladif<-(prop.table(tabladif))
barplot(tabladif, xlab='Dificultad de las tareas', ylab=' frecuencias relativas',las=1)
tabladifcodigo <- table(`dificodigo`)
tabladifcodigo <-(prop.table(tabladifcodigo))
barplot(tabladifcodigo, xlab='Dificultad del código', ylab=' frecuencias relativas',las=1)
tabladifdiagrama <- table(`difidiagramas`)
tabladifdiagrama <- (prop.table(tabladifdiagrama))
barplot(tabladifdiagrama, xlab='Dificultad del diagrama', ylab=' frecuencias relativas',las=1)
dificultad <-subset(post_test_semi_uva21, select= c(`difitareas`, `dificodigo`, `difidiagramas`))
stacked_df<- stack(dificultad)
# Nos permite hacer el box-plot conjunto de las 3 variables
par(mfrow = c(1, ncol(dificultad)))
invisible(lapply(1:ncol(dificultad), function(i) boxplot(dificultad[, i])))
cor.test(`difitareas`, `dificodigo`, method ='kendall')
getwd()
setwd("C:\\Users\\chema\\Desktop\\formacionPracticar\\r-studio-curso")
nombres<-c("enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre")
datos <- read.csv("revenues-expenses.csv",header = FALSE,col.names=nombres)
head(datos)
head(datos)
summary(datos)
str(datos)
#beneficios
print(class(revenues))
#separar datos
revenues <- datos[1, ]
head(revenues)
expenses <- datos[2, ]
head(expenses)
#beneficios
print(class(revenues))
print(class(expenses))
profit <- revenues - expenses
print("beneficios")
profit
medias_revenues <- rowMeans(revenues)
mensaje<-paste("La media de los ingresos es:",medias_revenues[1])
print(mensaje)
suma_profits <- rowSums(profit)
mensaje_profits<-paste("La suma de los profits es:",suma_profits[1])
print(mensaje_profits)
#quitando impuestos
for (i in seq_along(profit)) {
#si el beneficio es negativo, los impuestos tambien son negativos y se suman.
if(profit[i]<0){
profit.after.tax[i]=profit[i]+tax[i]
}else{
profit.after.tax[i]=profit[i]-tax[i]
}
}
#impuestos
tax <- round(0.30 * profit, 2)
tax
#quitando impuestos
for (i in seq_along(profit)) {
#si el beneficio es negativo, los impuestos tambien son negativos y se suman.
if(profit[i]<0){
profit.after.tax[i]=profit[i]+tax[i]
}else{
profit.after.tax[i]=profit[i]-tax[i]
}
}
#quitando impuestos
for (i in seq_along(profit)) {
#si el beneficio es negativo, los impuestos tambien son negativos y se suman.
if(profit[i]<0){
profit.after.tax[i]=profit[i]+tax[i]
}else{
profit.after.tax[i]=profit[i]-tax[i]
}
}
profit.after.tax<-NULL
#quitando impuestos
for (i in seq_along(profit)) {
#si el beneficio es negativo, los impuestos tambien son negativos y se suman.
if(profit[i]<0){
profit.after.tax[i]=profit[i]+tax[i]
}else{
profit.after.tax[i]=profit[i]-tax[i]
}
}
profit.after.tax
#beneficios medios
mean_pat <- round(rowMeans(profit.after.tax),2)
#carga de datos
getwd()
setwd("C:\\Users\\chema\\Desktop\\formacionPracticar\\r-studio-curso")
nombres<-c("enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre",
"octubre","noviembre","diciembre")
datos <- read.csv("revenues-expenses.csv",header = FALSE,col.names=nombres)
head(datos)
#resumen
head(datos)
summary(datos)
str(datos)
#separar datos
revenues <- datos[1, ]
head(revenues)
expenses <- datos[2, ]
head(expenses)
print(class(revenues))
medias_revenues <- rowMeans(revenues)
mensaje<-paste("La media de los ingresos es:",medias_revenues[1])
print(mensaje)
medias_expenses <- rowMeans(expenses)
mensaje_expenses<-paste("La media de los expenses es:",medias_expenses[1])
print(mensaje_expenses)
#beneficios
print(class(revenues))
print(class(expenses))
profit <- revenues - expenses
print("beneficios")
profit
suma_profits <- rowSums(profit)
mensaje_profits<-paste("La suma de los profits es:",suma_profits[1])
print(mensaje_profits)
#impuestos
tax <- round(0.30 * profit, 2)
tax
profit.after.tax<-NULL
#quitando impuestos
for (i in seq_along(profit)) {
#si el beneficio es negativo, los impuestos tambien son negativos y se suman.
if(profit[i]<0){
profit.after.tax[i]=profit[i]+tax[i]
}else{
profit.after.tax[i]=profit[i]-tax[i]
}
}
profit.after.tax
print(class(profit.after.tax))
#conversion
print(class(profit.after.tax))
profit.after.tax<-as.data.frame(profit.after.tax)
print(class(profit.after.tax))
profit.after.tax
names(profit.after.tax)<-nombres
profit.after.tax
print(class(profit.after.tax))
profit.after.tax<-as.data.frame(profit.after.tax)
print(class(profit.after.tax))
names(profit.after.tax)<-nombres
profit.after.tax
profit.after.tax<-NULL
#quitando impuestos
for (i in seq_along(profit)) {
#si el beneficio es negativo, los impuestos tambien son negativos y se suman.
if(profit[i]<0){
profit.after.tax[i]=profit[i]+tax[i]
}else{
profit.after.tax[i]=profit[i]-tax[i]
}
}
profit.after.tax
print(class(profit.after.tax))
profit.after.tax<-as.data.frame(profit.after.tax)
print(class(profit.after.tax))
names(profit.after.tax)<-nombres
profit.after.tax
print("Comparacion")
comparacion<-rbind(profit, profit.after.tax)
print(comparacion)
print(class(profit))
print(class(profit.after.tax))
print("Comparacion")
comparacion<-rbind(profit, profit.after.tax)
print(comparacion)
#margen
profit.margin <- round(profit.after.tax/ revenues, 2) * 100
profit.margin
mean_pat <- round(rowMeans(profit.after.tax),2)
mensaje_media_after<-paste("La media de los profits_after_tax es:",mean_pat[1])
print(mensaje_media_after)
#beneficios medios
mean_pat <- round(rowMeans(profit.after.tax),2)
mensaje_media_after<-paste("La media de los profits_after_tax es:",mean_pat[1])
print(mensaje_media_after)
print(class(profit.after.tax))
#meses con beneficios superiores a la media
good.months <- profit.after.tax > mean_pat
cuenta_good<-sum(good.months)
mensaje_good<-paste("Meses superiores a la media:",cuenta_good[1])
print(mensaje_good)
bad.months <- !good.months
cuenta_bad<-sum(bad.months)
mensaje_bad<-paste("Meses inferiores a la media:",cuenta_bad[1])
print(mensaje_bad)
print(class(profit.after.tax))
#mejor mes
mejor <- names(profit.after.tax)[which.max(profit.after.tax)]
print(paste("Mejor mes:", mejor))
#peor mes
peor <- names(profit.after.tax)[which.min(profit.after.tax)]
print(paste("Peor mes:", peor))
Seasons <- c("2005","2006","2007","2008","2009","2010","2011","2012","2013","2014")
Players <- c("KobeBryant","JoeJohnson","LeBronJames","CarmeloAnthony","DwightHoward","ChrisBosh","ChrisPaul","KevinDurant","DerrickRose","DwayneWade")
KobeBryant_FT <- c(696,667,623,483,439,483,381,525,18,196)
JoeJohnson_FT <- c(261,235,316,299,220,195,158,132,159,141)
LeBronJames_FT <- c(601,489,549,594,593,503,387,403,439,375)
CarmeloAnthony_FT <- c(573,459,464,371,508,507,295,425,459,189)
DwightHoward_FT <- c(356,390,529,504,483,546,281,355,349,143)
ChrisBosh_FT <- c(474,463,472,504,470,384,229,241,223,179)
ChrisPaul_FT <- c(394,292,332,455,161,337,260,286,295,289)
KevinDurant_FT <- c(209,209,391,452,756,594,431,679,703,146)
DerrickRose_FT <- c(146,146,146,197,259,476,194,322,27,152)
DwayneWade_FT <- c(629,432,354,590,534,494,235,308,189,284)
#creamos la matriz
FreeThrows <- rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT, DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT, DwayneWade_FT)
#eliminamos antiguo
rm(KobeBryant_FT, JoeJohnson_FT, CarmeloAnthony_FT, DwightHoward_FT, ChrisBosh_FT, LeBronJames_FT, ChrisPaul_FT, DerrickRose_FT, DwayneWade_FT, KevinDurant_FT)
#asignamos nombres
colnames(FreeThrows) <- Seasons
rownames(FreeThrows) <- Players
FreeThrows
#igual que antes
KobeBryant_FTA <- c(819,768,742,564,541,583,451,626,21,241)
JoeJohnson_FTA <- c(330,314,379,362,269,243,186,161,195,176)
LeBronJames_FTA <- c(814,701,771,762,773,663,502,535,585,528)
CarmeloAnthony_FTA <- c(709,568,590,468,612,605,367,512,541,237)
DwightHoward_FTA <- c(598,666,897,849,816,916,572,721,638,271)
ChrisBosh_FTA <- c(581,590,559,617,590,471,279,302,272,232)
ChrisPaul_FTA <- c(465,357,390,524,190,384,302,323,345,321)
KevinDurant_FTA <- c(256,256,448,524,840,675,501,750,805,171)
DerrickRose_FTA <- c(205,205,205,250,338,555,239,512,32,187)
DwayneWade_FTA <- c(803,535,467,771,702,652,297,425,258,370)
FreeThrowAttempts <- rbind(KobeBryant_FTA, JoeJohnson_FTA, LeBronJames_FTA, CarmeloAnthony_FTA, DwightHoward_FTA, ChrisBosh_FTA, ChrisPaul_FTA, KevinDurant_FTA, DerrickRose_FTA, DwayneWade_FTA)
rm(KobeBryant_FTA, JoeJohnson_FTA, CarmeloAnthony_FTA, DwightHoward_FTA, ChrisBosh_FTA, LeBronJames_FTA, ChrisPaul_FTA, DerrickRose_FTA, DwayneWade_FTA, KevinDurant_FTA)
colnames(FreeThrowAttempts) <- Seasons
rownames(FreeThrowAttempts) <- Players
FreeThrowAttempts
#traspone la matriz
FreeThrows
t(FreeThrows[1:10,,drop=F])
print(class(FreeThrows))
#traspone la matriz
FreeThrows
t(FreeThrows[1:10,,drop=F])
#funcion para crear grafico
myplot <- function(z, who=1:10) {
matplot(t(z[who,,drop=F]), type="b", pch=15:18, col=c(1:4,6), main="Basketball Players Analysis")
legend("bottomleft",text.font = 1, cex = 0.5, inset=0.01, legend=Players[who], col=c(1:4,6), pch=15:18, horiz=F)
}
#diferentes graficos
myplot(FreeThrows)
#buscar jugador con mas ratio de acierto en free throws
print(class(FreeThrows))
print(class(FreeThrowAttempts))
ratio_free<-FreeThrows/FreeThrowAttempts
ratio_free
getwd()
setwd("C:\\Users\\chema\\Desktop\\formacionPracticar\\r-studio-curso")
getwd()
stats<-read.csv("P2-Demographic-Data.csv")
head(stats)
#resumen general
nrow(stats)
ncol(stats)
head(stats, n=10)
tail(stats)
str(stats)
summary(stats)
print(class(stats))
#distribucion
distribucion <- table(stats$Income.Group)
print(distribucion)
colnames(stats)
stats[3,3]
stats[3,"Birth.rate"]
stats$Internet.users
stats$Internet.users[2]
stats[,"Internet.users"]
print(class(stats))
str(stats)
#convertimos en factor
stats$Income.Group<-factor(stats$Income.Group)
levels(stats$Income.Group)
str(stats)
print(class(stats)
print(class(stats))
#10 primeras filas
stats[1:10,]
print(class(stats))
#10 primeras filas
stats[1:10,]
#filas 4 y 100
stats[c(4,100),]
stats[,c(2,4)]
stats[,3:]
stats[,3:nrow(stats)]
stats[,3:ncol(stats)]
stats[3:ncol(stats),]
stats[3:nrow(stats),]
print(class(stats))
is.data.frame(stats[1,])
is.data.frame(stats[,1])
print(class(stats[,1]))
print(class(stats))
#calculo entre columnas
stats$MyCalc<-stats$Birth.rate+stats$Internet.users
head(stats)
str(stats)
#eliminamos columna
stats$MyCalc<-NULL
str(stats)
#filtro
filter<-stats$Internet.users<2
filter
#filtro
print(class(stats))
filter<-stats$Internet.users<2
filter
stats[stats$Birth.rate>40 &stats$Internet.users<2,]
stats[stats$Country.Name=="Spain",]
#añadir columna con valores segun condicion
library(dplyr)
print(class(stats))
stats <- stats %>%mutate(cumple_condicion = ifelse(Internet.users <2, "Cumple", "No Cumple"))
head(stats)
#elementos unicos
print(class(stats))
diferentes<-unique(stats$Income.Group)
diferentes
#elementos unicos
print(class(stats))
str(stats)
diferentes<-unique(stats$Income.Group)
diferentes
typeof(stats)
class(stats)
typeof(stats)
qplot(data=stats, x=Income.Group,y=Birth.rate,size=I(3))
#graficos
library(ggplot2)
qplot(data=stats, x=Income.Group,y=Birth.rate,size=I(3))
qplot(data=stats, x=Income.Group,y=Birth.rate,size=I(3),colour=I("blue"))
qplot(data=stats, x=Income.Group,y=Birth.rate,geom="boxplot")
qplot(data=stats, x=Internet.users,y=Birth.rate,size=I(3),colour=Income.Group)
#graficos
library(ggplot2)
qplot(data=stats, x=Income.Group,y=Birth.rate,geom="boxplot")
qplot(data=stats, x=Internet.users,y=Birth.rate,size=I(3),colour=Income.Group)
mydf<-data.frame(Country=Countries_2012_Dataset,Code=Codes_2012_Dataset,Region=Regions_2012_Dataset)
Countries_2012_Dataset <- c("Aruba","Afghanistan","Angola","Albania","United Arab Emirates","Argentina","Armenia","Antigua and Barbuda","Australia","Austria","Azerbaijan","Burundi","Belgium","Benin","Burkina Faso","Bangladesh","Bulgaria","Bahrain","Bahamas, The","Bosnia and Herzegovina","Belarus","Belize","Bermuda","Bolivia","Brazil","Barbados","Brunei Darussalam","Bhutan","Botswana","Central African Republic","Canada","Switzerland","Chile","China","Cote d'Ivoire","Cameroon","Congo, Rep.","Colombia","Comoros","Cabo Verde","Costa Rica","Cuba","Cayman Islands","Cyprus","Czech Republic","Germany","Djibouti","Denmark","Dominican Republic","Algeria","Ecuador","Egypt, Arab Rep.","Eritrea","Spain","Estonia","Ethiopia","Finland","Fiji","France","Micronesia, Fed. Sts.","Gabon","United Kingdom","Georgia","Ghana","Guinea","Gambia, The","Guinea-Bissau","Equatorial Guinea","Greece","Grenada","Greenland","Guatemala","Guam","Guyana","Hong Kong SAR, China","Honduras","Croatia","Haiti","Hungary","Indonesia","India","Ireland","Iran, Islamic Rep.","Iraq","Iceland","Israel","Italy","Jamaica","Jordan","Japan","Kazakhstan","Kenya","Kyrgyz Republic","Cambodia","Kiribati","Korea, Rep.","Kuwait","Lao PDR","Lebanon","Liberia","Libya","St. Lucia","Liechtenstein","Sri Lanka","Lesotho","Lithuania","Luxembourg","Latvia","Macao SAR, China","Morocco","Moldova","Madagascar","Maldives","Mexico","Macedonia, FYR","Mali","Malta","Myanmar","Montenegro","Mongolia","Mozambique","Mauritania","Mauritius","Malawi","Malaysia","Namibia","New Caledonia","Niger","Nigeria","Nicaragua","Netherlands","Norway","Nepal","New Zealand","Oman","Pakistan","Panama","Peru","Philippines","Papua New Guinea","Poland","Puerto Rico","Portugal","Paraguay","French Polynesia","Qatar","Romania","Russian Federation","Rwanda","Saudi Arabia","Sudan","Senegal","Singapore","Solomon Islands","Sierra Leone","El Salvador","Somalia","Serbia","South Sudan","Sao Tome and Principe","Suriname","Slovak Republic","Slovenia","Sweden","Swaziland","Seychelles","Syrian Arab Republic","Chad","Togo","Thailand","Tajikistan","Turkmenistan","Timor-Leste","Tonga","Trinidad and Tobago","Tunisia","Turkey","Tanzania","Uganda","Ukraine","Uruguay","United States","Uzbekistan","St. Vincent and the Grenadines","Venezuela, RB","Virgin Islands (U.S.)","Vietnam","Vanuatu","West Bank and Gaza","Samoa","Yemen, Rep.","South Africa","Congo, Dem. Rep.","Zambia","Zimbabwe")
Codes_2012_Dataset <- c("ABW","AFG","AGO","ALB","ARE","ARG","ARM","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BFA","BGD","BGR","BHR","BHS","BIH","BLR","BLZ","BMU","BOL","BRA","BRB","BRN","BTN","BWA","CAF","CAN","CHE","CHL","CHN","CIV","CMR","COG","COL","COM","CPV","CRI","CUB","CYM","CYP","CZE","DEU","DJI","DNK","DOM","DZA","ECU","EGY","ERI","ESP","EST","ETH","FIN","FJI","FRA","FSM","GAB","GBR","GEO","GHA","GIN","GMB","GNB","GNQ","GRC","GRD","GRL","GTM","GUM","GUY","HKG","HND","HRV","HTI","HUN","IDN","IND","IRL","IRN","IRQ","ISL","ISR","ITA","JAM","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LIE","LKA","LSO","LTU","LUX","LVA","MAC","MAR","MDA","MDG","MDV","MEX","MKD","MLI","MLT","MMR","MNE","MNG","MOZ","MRT","MUS","MWI","MYS","NAM","NCL","NER","NGA","NIC","NLD","NOR","NPL","NZL","OMN","PAK","PAN","PER","PHL","PNG","POL","PRI","PRT","PRY","PYF","QAT","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SLB","SLE","SLV","SOM","SRB","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SYC","SYR","TCD","TGO","THA","TJK","TKM","TLS","TON","TTO","TUN","TUR","TZA","UGA","UKR","URY","USA","UZB","VCT","VEN","VIR","VNM","VUT","PSE","WSM","YEM","ZAF","COD","ZMB","ZWE")
Regions_2012_Dataset <- c("The Americas","Asia","Africa","Europe","Middle East","The Americas","Asia","The Americas","Oceania","Europe","Asia","Africa","Europe","Africa","Africa","Asia","Europe","Middle East","The Americas","Europe","Europe","The Americas","The Americas","The Americas","The Americas","The Americas","Asia","Asia","Africa","Africa","The Americas","Europe","The Americas","Asia","Africa","Africa","Africa","The Americas","Africa","Africa","The Americas","The Americas","The Americas","Europe","Europe","Europe","Africa","Europe","The Americas","Africa","The Americas","Africa","Africa","Europe","Europe","Africa","Europe","Oceania","Europe","Oceania","Africa","Europe","Asia","Africa","Africa","Africa","Africa","Africa","Europe","The Americas","The Americas","The Americas","Oceania","The Americas","Asia","The Americas","Europe","The Americas","Europe","Asia","Asia","Europe","Middle East","Middle East","Europe","Middle East","Europe","The Americas","Middle East","Asia","Asia","Africa","Asia","Asia","Oceania","Asia","Middle East","Asia","Middle East","Africa","Africa","The Americas","Europe","Asia","Africa","Europe","Europe","Europe","Asia","Africa","Europe","Africa","Asia","The Americas","Europe","Africa","Europe","Asia","Europe","Asia","Africa","Africa","Africa","Africa","Asia","Africa","Oceania","Africa","Africa","The Americas","Europe","Europe","Asia","Oceania","Middle East","Asia","The Americas","The Americas","Asia","Oceania","Europe","The Americas","Europe","The Americas","Oceania","Middle East","Europe","Europe","Africa","Middle East","Africa","Africa","Asia","Oceania","Africa","The Americas","Africa","Europe","Africa","Africa","The Americas","Europe","Europe","Europe","Africa","Africa","Middle East","Africa","Africa","Asia","Asia","Asia","Asia","Oceania","The Americas","Africa","Europe","Africa","Africa","Europe","The Americas","The Americas","Asia","The Americas","The Americas","The Americas","Asia","Oceania","Middle East","Oceania","Middle East","Africa","Africa","Africa","Africa")
mydf<-data.frame(Country=Countries_2012_Dataset,Code=Codes_2012_Dataset,Region=Regions_2012_Dataset)
head(mydf)
str(mydf)
#union dataframes
head(stats)
head(mydf)
class(stats)
class(mydf)
#columna primer dataframe y columna segundo dataframe
merged<-merge(stats,mydf,by.x="Country.Code",by.y="Code")
head(merged)
#eliminamos columna
merged$Country<-NULL
str(merged)
#grafico
qplot(data=merged,x=Internet.users,y=Birth.rate,colour=Region,size=I(5),shape=I(17),alpha=I(0.6),main="Birth rate vs Internet users")
#grafico
class(merged)
str(merged)
qplot(data=merged,x=Internet.users,y=Birth.rate,colour=Region,size=I(5),
shape=I(17),alpha=I(0.6),main="Birth rate vs Internet users")
